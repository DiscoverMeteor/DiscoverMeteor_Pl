---
title: Animacje
slug: animations
date: 0014/01/01
number: 14
contents: Co dzieje się za kulisami gdy Meteor zamienia dwa elementy DOM.|Jak animować zmianę kolejności postów.|Jak animować wstawianie nowych postów.
paragraphs: 58
---

Osiągneliśmy już głosowanie w czasie rzeczywistym, punktację i klasyfikację. Niestety te usprawnienia doprowadziły do nieprzyjemnego interfejsu użytkownika, ponieważ posty skaczą po stronie głównej. Użyjemy animacji aby to wygładzić. 

### Meteor i DOM

Zanim dojdziemy do prawdziwej zabawy (przemieszczania elementów), musimy zrozumieć jak Meteor współpracuje z DOM (ang. Document Object Model -- kolekcją elementów HTML które składają się na zawartość strony).

Główną zasadą o której należy pamiętać jest to, że elementy *nie mogą się przemieszczać*. Mogą być wyłącznie usuwane i tworzone (miej na uwadze, że jest to ograniczenie DOM, a nie Meteora). Aby więc spowodawać iluzję zamiany elementów A i B Meteor usunie element B i wstawi całkiem nową kopię (B') przed elementem A.

Nie ułatwia to animacji, ponieważ nie można po prostu animować elementu B na nową pozycję, ponieważ B zniknie zaraz po przerenderowaniu strony (co jak wiemy dzieje się natychmiastowo dzięki reaktywności). Zamiast tego należy animować nowo stworzony B', który przemieszcza się z początkowej pozycji B' do nowej pozycji przed A.

Aby zamienić miejscami posty A i B (umieszczone w miejscach odpowiednio p1 i p2) przejdziemy przez kolejne kroki:

1. Usunięcie B
2. Utworzenie B' przed A w DOM
3. Przesunięcie B' na pozycję p2
4. Przesunięcie A na pozycję p1
5. Animowanie A na pozycję p2
6. Animowanie B' na pozycję p1

Poniższy diagram wyjaśnia szczegółowo te kroki:

<%= diagram "animation_diagram", "Zamiana dwóch postów", "pull-center" %>

////

////

////

### Odpowiednie czasy przy animacji

////

////

////

////

////

////

### Pozycjonowanie CSS

////

////

////

////

////

~~~css
.post{
  position:relative;
  transition:all 300ms 0ms ease-in;
}
~~~
<%= caption "client/stylesheets/style.css" %>

////

////

<% note do %>

### Position:absolute

////

////

<% end %>

### Total Recall

////

////

> //// 

////

////

### Ocena Postów

////

////

////

////

~~~js
Template.postsList.helpers({
  postsWithRank: function() {
    this.posts.rewind();
    return this.posts.map(function(post, index, cursor) {
      post._rank = index;
      return post;
    });
  }
});
~~~
<%= caption "/client/views/posts/posts_list.js" %>
<%= highlight "2~8" %>

////

////

~~~html
<template name="postsList">
  <div class="posts">
    {{#each postsWithRank}}
      {{> postItem}}
    {{/each}}
    
    {{#if nextPath}}
      <a class="load-more" href="{{nextPath}}">Load more</a>
    {{/if}}
  </div>
</template>
~~~
<%= caption "/client/views/posts/posts_list.html" %>

<%= highlight "3" %>

<% note do %>

### Przewiń wstecz

////

////

////

<% end %>

### Wszystko razem

////

~~~js
Template.postItem.helpers({
  //...
});

Template.postItem.rendered = function(){
  // animacja postu na nową pozycję
  var instance = this;
  var rank = instance.data._rank;
  var $this = $(this.firstNode);
  var postHeight = 80;
  var newPosition = rank * postHeight;
 
  // jeżeli element posiada currentPosition (tzn. nie jest pierwszy raz renderowany)
  if (typeof(instance.currentPosition) !== 'undefined') {
    var previousPosition = instance.currentPosition;
    // oblicz różnicę między starą i nową pozycją i wyślij tam element
    var delta = previousPosition - newPosition;
    $this.css("top", delta + "px");
  }
  
  // rysuj w starej pozycji..
  Meteor.defer(function() {
    instance.currentPosition = newPosition;
    // przenieś element na pozycję początkową
    $this.css("top",  "0px");
  }); 
};

Template.postItem.events({
  //...
});
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "5~27" %>

<%= commit "14-1", "Dodano animację uporządkowania postów." %>

////

////

////

### Animacja Nowych Postów

////

////

1. ////
2. ////

////

////

~~~js
Template.postItem.helpers({
  //...
});

Template.postItem.rendered = function(){
  // animacja postu na nową pozycję
  var instance = this;
  var rank = instance.data._rank;
  var $this = $(this.firstNode);
  var postHeight = 80;
  var newPosition = rank * postHeight;
  
  // jeżeli element posiada currentPosition (tzn. nie jest pierwszy raz renderowany)
  if (typeof(instance.currentPosition) !== 'undefined') {
    var previousPosition = instance.currentPosition;
    // oblicz różnicę między starą i nową pozycją i wyślij tam element
    var delta = previousPosition - newPosition;
    $this.css("top", delta + "px");
  } else {
    // jest to pierwsze renderowanie, więc ukryj element
    $this.addClass("invisible");
  }
  
  // rysuj w starej pozycji..
  Meteor.defer(function() {
    instance.currentPosition = newPosition;
    // przenieś element na pozycję początkową
    $this.css("top",  "0px").removeClass("invisible");
  }); 
};

Template.postItem.events({
  //...
});
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "19~22,28" %>

<%= commit "14-2", "Ściemnianie elementów po narysowaniu." %>

////

<% note do %>

### CSS i JavaScript

////

////

<% end %>

////
